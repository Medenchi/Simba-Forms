import telebot
from flask import Flask, request
import sqlite3
import matplotlib.pyplot as plt
import os
import random
import string
import config

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('database.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''
    CREATE TABLE IF NOT EXISTS responses (
        user_id INTEGER,
        username TEXT,
        question_number INTEGER,
        answer TEXT
    )
''')
conn.commit()

bot = telebot.TeleBot(config.BOT_TOKEN)
app = Flask(__name__)

# –í–æ–ø—Ä–æ—Å—ã
questions = [
    "–ö–∞–∫ –≤–∞–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å?",
    "–£–¥–æ–±–Ω–æ –ª–∏ –±—ã–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?",
    "–ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å?",
    "–û—Ü–µ–Ω–∏—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã",
    "–ù—Ä–∞–≤–∏—Ç—Å—è –ª–∏ –≤–∞–º –¥–∏–∑–∞–π–Ω?",
    "–ï—Å—Ç—å –ª–∏ –±–∞–≥–∏?",
    "–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã –±—É–¥–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ?",
    "–ß—Ç–æ –±—ã –≤—ã –¥–æ–±–∞–≤–∏–ª–∏?",
    "–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç?",
    "–î—Ä—É–≥–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏?"
]

user_states = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# --- –ö–æ–º–∞–Ω–¥—ã ---
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    user_states[user_id] = 0
    bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! –ú—ã –Ω–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å. –ì–æ—Ç–æ–≤—ã?")
    ask_question(message.from_user)

@bot.message_handler(commands=['analytics'])
def analytics(message):
    if message.chat.id != config.ADMIN_CHAT_ID:
        bot.reply_to(message, "–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
        return

    cursor.execute("SELECT COUNT(DISTINCT user_id) FROM responses")
    total_users = cursor.fetchone()[0]
    cursor.execute("SELECT COUNT(*) FROM responses")
    total_answers = cursor.fetchone()[0]

    question_stats = []
    for i in range(1, len(questions)+1):
        cursor.execute("SELECT COUNT(*) FROM responses WHERE question_number=?", (i,))
        count = cursor.fetchone()[0]
        question_stats.append((i, questions[i-1], count))

    text = f"üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞:\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ—à–ª–æ –æ–ø—Ä–æ—Å: {total_users}\n–í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤: {total_answers}\n\n–û—Ç–≤–µ—Ç—ã –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º:\n"
    for i, q, count in question_stats:
        text += f"{i}. {q} ‚Äî {count} {'–æ—Ç–≤–µ—Ç' if count % 10 == 1 and count != 11 else '–æ—Ç–≤–µ—Ç–∞' if count % 10 in [2,3,4] and count not in [12,13,14] else '–æ—Ç–≤–µ—Ç–æ–≤'}\n"

    bot.send_message(config.ADMIN_CHAT_ID, text)
    generate_and_send_charts(bot, config.ADMIN_CHAT_ID, question_stats)

# --- –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–æ—Å–∞ ---
@bot.message_handler(func=lambda message: message.from_user.id in user_states)
def handle_answer(message):
    user = message.from_user
    user_id = user.id
    answer = message.text

    current_q = user_states[user_id]

    if current_q < len(questions):
        save_answer(user, current_q, answer)
        user_states[user_id] += 1
        ask_question(user)
    else:
        bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞!")
        send_to_group(user)
        del user_states[user_id]

def ask_question(user):
    q_index = user_states[user.id]
    if q_index < len(questions):
        bot.send_message(user.id, questions[q_index])
    else:
        bot.send_message(user.id, "–°–ø–∞—Å–∏–±–æ!")

def save_answer(user, q_index, answer):
    cursor.execute(
        "INSERT INTO responses (user_id, username, question_number, answer) VALUES (?, ?, ?, ?)",
        (user.id, user.username, q_index + 1, answer)
    )
    conn.commit()

def send_to_group(user):
    cursor.execute("SELECT * FROM responses WHERE user_id=?", (user.id,))
    answers = cursor.fetchall()
    text = f"üë§ –û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user.username} ({user.id}):\n\n"
    for row in answers:
        text += f"{row[2]}. {row[3]}\n"
    bot.send_message(config.ADMIN_CHAT_ID, text)

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ ---
def generate_chart(question_num, question_text, answer_count):
    plt.figure(figsize=(6, 3))
    plt.bar(['–û—Ç–≤–µ—Ç—ã'], [answer_count], color='skyblue')
    plt.title(f"–í–æ–ø—Ä–æ—Å {question_num}: {question_text[:30]}...")
    plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
    plt.tight_layout()
    filename = ''.join(random.choices(string.ascii_lowercase, k=10)) + ".png"
    plt.savefig(filename)
    plt.close()
    return filename

def generate_and_send_charts(bot, chat_id, stats):
    for i, q, count in stats:
        file_path = generate_chart(i, q, count)
        with open(file_path, 'rb') as photo:
            bot.send_photo(chat_id, photo, caption=f"–í–æ–ø—Ä–æ—Å {i}: {q}")
        os.remove(file_path)

# --- –í–µ–±—Ö—É–∫ ---
@app.route('/webhook', methods=['POST'])
def webhook():
    if request.headers.get('X-Telegram-Bot-Api-Secret-Token') == config.SECRET_TOKEN:
        update = telebot.types.Update.de_json(request.stream.read().decode('utf-8'))
        bot.process_new_updates([update])
        return '', 200
    else:
        return 'Forbidden', 403

@app.route('/')
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

if __name__ == '__main__':
    from waitress import serve
    bot.remove_webhook()
    bot.set_webhook(url=config.WEBHOOK_URL, secret_token=config.SECRET_TOKEN)
    print("–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...")
    serve(app, host='0.0.0.0', port=config.PORT)
